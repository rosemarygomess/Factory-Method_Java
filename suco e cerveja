

abstract class Vehicle {
  public abstract int getWheel();
  
  public String toString() {
    return "Wheel: " + this.getWheel();
  }
}

class Juice extends Vehicle {
  int wheel;
  
  Juice(int wheel) {
    this.wheel = wheel;
  }

  @Override
  public int getWheel() {
    return this.wheel;
  }
}

class Beer extends Vehicle {
  int wheel;
  
  Bike(int wheel) {
    this.wheel = wheel;
  }
  
  @Override
  public int getWheel() {
    return this.wheel;
  }
}

class VehicleFactory {
  public static Vehicle getInstance(String type, int wheel) {
    if(type == "Juice") {
      return new Juice(wheel);
    } else if(type == "beer") {
      return new Beer(wheel);
    }
    
    return null;
  }
}

public class FactoryPatternExample {

  public static void main(String[] args) {
    Vehicle car = VehicleFactory.getInstance("juice", 4);
    System.out.println(juice);
    
    Vehicle bike = VehicleFactory.getInstance("beer", 2);
    System.out.println(beer);
  }

}


